<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2015-12-20 23:58"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Chad Remesch</title>
<link>http://remesch.com</link>
<description/>
<pubDate>Sun, 20 Dec 2015 23:58:55 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://remesch.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>chadrem</wp:author_login>
  <wp:author_email>chad@remesch.com</wp:author_email>
  <wp:author_display_name><![CDATA[chadrem]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>4343</wp:term_id>
  <wp:tag_slug>actionscript</wp:tag_slug>
  <wp:tag_name><![CDATA[actionscript]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1258</wp:term_id>
  <wp:tag_slug>actors</wp:tag_slug>
  <wp:tag_name><![CDATA[actors]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>49681</wp:term_id>
  <wp:tag_slug>air</wp:tag_slug>
  <wp:tag_name><![CDATA[AIR]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>641922</wp:term_id>
  <wp:tag_slug>android</wp:tag_slug>
  <wp:tag_name><![CDATA[android]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>214618</wp:term_id>
  <wp:tag_slug>concurrency</wp:tag_slug>
  <wp:tag_name><![CDATA[concurrency]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20837021</wp:term_id>
  <wp:tag_slug>crossbridge</wp:tag_slug>
  <wp:tag_name><![CDATA[CrossBridge]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>360372</wp:term_id>
  <wp:tag_slug>daemons</wp:tag_slug>
  <wp:tag_name><![CDATA[daemons]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>22379</wp:term_id>
  <wp:tag_slug>data</wp:tag_slug>
  <wp:tag_name><![CDATA[data]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10286</wp:term_id>
  <wp:tag_slug>databases</wp:tag_slug>
  <wp:tag_name><![CDATA[databases]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>19664254</wp:term_id>
  <wp:tag_slug>eventmachine</wp:tag_slug>
  <wp:tag_name><![CDATA[eventmachine]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>456</wp:term_id>
  <wp:tag_slug>flash</wp:tag_slug>
  <wp:tag_name><![CDATA[flash]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21</wp:term_id>
  <wp:tag_slug>games</wp:tag_slug>
  <wp:tag_name><![CDATA[games]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>324281</wp:term_id>
  <wp:tag_slug>ios</wp:tag_slug>
  <wp:tag_name><![CDATA[ios]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>17441</wp:term_id>
  <wp:tag_slug>jruby</wp:tag_slug>
  <wp:tag_name><![CDATA[jruby]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>146457584</wp:term_id>
  <wp:tag_slug>lockserver</wp:tag_slug>
  <wp:tag_name><![CDATA[lockserver]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21517</wp:term_id>
  <wp:tag_slug>lua</wp:tag_slug>
  <wp:tag_name><![CDATA[Lua]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7426</wp:term_id>
  <wp:tag_slug>networking</wp:tag_slug>
  <wp:tag_name><![CDATA[networking]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>22319505</wp:term_id>
  <wp:tag_slug>nosql</wp:tag_slug>
  <wp:tag_name><![CDATA[nosql]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>332346</wp:term_id>
  <wp:tag_slug>officer</wp:tag_slug>
  <wp:tag_name><![CDATA[officer]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1120144</wp:term_id>
  <wp:tag_slug>raad</wp:tag_slug>
  <wp:tag_name><![CDATA[raad]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6652</wp:term_id>
  <wp:tag_slug>rails</wp:tag_slug>
  <wp:tag_name><![CDATA[rails]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>889420</wp:term_id>
  <wp:tag_slug>rspec</wp:tag_slug>
  <wp:tag_name><![CDATA[rspec]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4872</wp:term_id>
  <wp:tag_slug>ruby</wp:tag_slug>
  <wp:tag_name><![CDATA[ruby]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3601</wp:term_id>
  <wp:tag_slug>ruby-on-rails</wp:tag_slug>
  <wp:tag_name><![CDATA[ruby on rails]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>146457585</wp:term_id>
  <wp:tag_slug>setupnotes</wp:tag_slug>
  <wp:tag_name><![CDATA[setupnotes]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10346</wp:term_id>
  <wp:tag_slug>sql</wp:tag_slug>
  <wp:tag_name><![CDATA[sql]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12</wp:term_id>
  <wp:tag_slug>testing</wp:tag_slug>
  <wp:tag_name><![CDATA[testing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>98471</wp:term_id>
  <wp:tag_slug>threading</wp:tag_slug>
  <wp:tag_name><![CDATA[threading]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>28055586</wp:term_id>
  <wp:tag_slug>torquebox</wp:tag_slug>
  <wp:tag_name><![CDATA[torquebox]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>170199</wp:term_id>
  <wp:tag_slug>totem</wp:tag_slug>
  <wp:tag_name><![CDATA[totem]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>87600</wp:term_id>
  <wp:tag_slug>tribe</wp:tag_slug>
  <wp:tag_name><![CDATA[tribe]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>237031</wp:term_id>
  <wp:tag_slug>workers</wp:tag_slug>
  <wp:tag_name><![CDATA[workers]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title> &#187; Chad Remesch</title>
		<link>http://remesch.com</link>
	</image>
	<item>
  <title>cropped-ncr_fallsugarmaple_ws.jpg</title>
  <link>http://remesch.com/?attachment_id=4</link>
  <pubDate>Sat, 22 Jan 2011 19:03:04 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.files.wordpress.com/2011/01/cropped-ncr_fallsugarmaple_ws.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://remesch.files.wordpress.com/2011/01/cropped-ncr_fallsugarmaple_ws.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4</wp:post_id>
  <wp:post_date>2011-01-22 19:03:04</wp:post_date>
  <wp:post_date_gmt>2011-01-22 19:03:04</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cropped-ncr_fallsugarmaple_ws-jpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://remesch.files.wordpress.com/2011/01/cropped-ncr_fallsugarmaple_ws.jpg</wp:attachment_url>
</item>
<item>
  <title>chad_remesch</title>
  <link>http://remesch.com/?attachment_id=12</link>
  <pubDate>Sat, 22 Jan 2011 19:39:56 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.files.wordpress.com/2011/01/chad_remesch.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>2011-01-22 19:39:56</wp:post_date>
  <wp:post_date_gmt>2011-01-22 19:39:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>chad_remesch</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://remesch.files.wordpress.com/2011/01/chad_remesch.jpg</wp:attachment_url>
</item>
<item>
  <title>Officer: The ruby lock server and client</title>
  <link>http://remesch.com/2011/01/23/officer-the-ruby-lock-server-and-client/</link>
  <pubDate>Sun, 23 Jan 2011 18:48:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/officer-the-ruby-lock-server-and-client</guid>
  <description/>
  <content:encoded><![CDATA[<p><strong>What is it?</strong><br /><a href="https://github.com/chadrem/officer">Officer</a> is an easy to use distributed lock server and client written in Ruby. &nbsp;Wikipedia calls it a <a href="http://en.wikipedia.org/wiki/Distributed_lock_manager">Distributed Lock Manager (DLM)</a>.</p><p><strong>Why would I use it?</strong><br />You use it to prevent <a href="http://en.wikipedia.org/wiki/Race_condition">race conditions</a>&nbsp;in your distributed applications. &nbsp;It can be used with any Ruby app including Rails. &nbsp;Officer helps you coordinate access to shared resources in a predictable way since a lock can be held by only one client at a time. &nbsp;Other clients will queue in an orderly fashion and wait their turn.</p><p><strong>How did it come about?</strong><br />Back in 2009, <a href="http://www.bluefroggaming.com">my company</a> wrote a Facebook game named <a href="http://apps.facebook.com/starfleet_commander/">Starfleet Commander</a>. &nbsp;It's a highly competitive, massively multiplayer, real time strategy game. &nbsp;In other words, it's a Ruby on Rails application that encourages customers to find and exploit race conditions. &nbsp;I wrote Officer so that I could fix this problem with minimal changes to the game code.</p><p><strong>Is it only useful for games?</strong><br />Although it was originally designed for a game, it can be used with any application that needs distributed exclusive locks. &nbsp;Most typical web apps don't benefit from Officer since there is little purpose in exploiting their race conditions.</p><p><strong>What are the alternatives?</strong><br />Officer was originally inspired by <a href="http://dustin.github.com/elock/">Elock</a>. &nbsp;Unfortunately for me, I encountered a serious memory leak in Elock and thus Officer was created. &nbsp;In many cases, messaging infrastructure&nbsp;is a better choice than a lock server. &nbsp;One such product is&nbsp;<a href="http://www.rabbitmq.com">RabbitMQ</a>. &nbsp;This wasn't an option for Starfleet Commander&nbsp;since it would have required significant&nbsp;re-architecting&nbsp;of the code base.</p><p><strong>What about languages other than Ruby?</strong><br />Officer's network protocol is a very simple JSON syntax so it should be relatively straightforward to port the client to other languages. &nbsp;Please contribute them if you have the time.</p><p><strong>How do I find out more?</strong><br />Check out <a href="https://github.com/chadrem/officer">Officer on Github</a>&nbsp;for installation and usage instructions. &nbsp;Feel free to contact me if you have questions or find problems with it. &nbsp;My email is under my picture.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[What is it?Officer is an easy to use distributed lock server and client written in Ruby. Wikipedia calls it a Distributed Lock Manager (DLM). Why would I use it?You use it to prevent race conditions in your distributed applications. It can be used...]]></excerpt:encoded>
  <wp:post_id>17</wp:post_id>
  <wp:post_date>2011-01-23 18:48:00</wp:post_date>
  <wp:post_date_gmt>2011-01-23 18:48:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>officer-the-ruby-lock-server-and-client</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="eventmachine"><![CDATA[eventmachine]]></category>
  <category domain="post_tag" nicename="lockserver"><![CDATA[lockserver]]></category>
  <category domain="post_tag" nicename="officer"><![CDATA[officer]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>379</wp:comment_id>
    <wp:comment_author><![CDATA[wylde's bulk moz checker]]></wp:comment_author>
    <wp:comment_author_email>kathrin_hatch@gawab.com</wp:comment_author_email>
    <wp:comment_author_url>http://moz.theimsociety.com/</wp:comment_author_url>
    <wp:comment_author_IP>39.169.218.226</wp:comment_author_IP>
    <wp:comment_date>2015-06-28 17:05:42</wp:comment_date>
    <wp:comment_date_gmt>2015-06-28 21:05:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[A "brand" is more than just a combination of words, which is why names 
like mortgageforyourhome. In this way, the seller doesn't give the buyer direct access to his financial accounts but the buyer 
can still see and verify the data. There's a time for due diligence and there's a time 
to close a deal.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1435525542.34068393707275390625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1435525542</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1435530244.466001987457275390625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Setup Notes: Ruby Debug with MRI 1.9.3-p125</title>
  <link>http://remesch.com/2012/03/08/setup-notes-for-installing-ruby-debug-with-mr/</link>
  <pubDate>Thu, 08 Mar 2012 18:25:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/setup-notes-for-installing-ruby-debug-with-mr</guid>
  <description/>
  <content:encoded><![CDATA[<p>See my <a href="https://gist.github.com/1885892">setup notes</a> on Github.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[See my setup notes on Github.]]></excerpt:encoded>
  <wp:post_id>18</wp:post_id>
  <wp:post_date>2012-03-08 18:25:00</wp:post_date>
  <wp:post_date_gmt>2012-03-08 18:25:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>setup-notes-for-installing-ruby-debug-with-mr</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="post_tag" nicename="setupnotes"><![CDATA[setupnotes]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Market Bot: Scraping Google's Android Market</title>
  <link>http://remesch.com/2011/10/08/market-bot-high-performance-ruby-scraper-for/</link>
  <pubDate>Sat, 08 Oct 2011 21:15:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/market-bot-high-performance-ruby-scraper-for</guid>
  <description/>
  <content:encoded><![CDATA[<p>Today I released <a href="https://github.com/chadrem/market_bot">Market Bot</a>.&nbsp; Features include a simple Ruby API and high performance thanks to the Nokogiri and Typhoeus gems.&nbsp; It also has relatively good test coverage using rspec.&nbsp; More information including examples, benchmarks, and source code can be found on my github account.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[Today I released Market Bot. Features include a simple Ruby API and high performance thanks to the Nokogiri and Typhoeus gems. It also has relatively good test coverage using rspec. More information including examples, benchmarks, and source code ...]]></excerpt:encoded>
  <wp:post_id>19</wp:post_id>
  <wp:post_date>2011-10-08 21:15:00</wp:post_date>
  <wp:post_date_gmt>2011-10-08 21:15:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>market-bot-high-performance-ruby-scraper-for</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>2</wp:comment_id>
    <wp:comment_author><![CDATA[Henry]]></wp:comment_author>
    <wp:comment_author_email>henrybai@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP/>
    <wp:comment_date>2012-12-12 11:07:38</wp:comment_date>
    <wp:comment_date_gmt>2012-12-12 11:07:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi,I was wondering if you ever encountered Google's Captcha page when you are scraping Google Play. I kept on encountering the following:&quot;Our systems have detected unusual traffic from your computer network. This page checks to see if it's really you sending the requests, and not a robot&quot;halfway into scraping though the leaderboard and the apps.I ran it on an Amazon EC2 server and it encounters the same issue too. Did you ever encounter it?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-12-12 11:07:38</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3</wp:comment_id>
    <wp:comment_author><![CDATA[dei79]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP/>
    <wp:comment_date>2012-12-15 17:31:26</wp:comment_date>
    <wp:comment_date_gmt>2012-12-15 17:31:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I got the same issue today, it looks like google changed something on the robot detection so that market_bot will be detected as robotFollow my issue on github: https://github.com/chadrem/market_bot/issues/2]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-12-15 17:31:26</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Should I use SQL or NoSQL?</title>
  <link>http://remesch.com/2011/01/20/should-i-use-sql-or-no-sql/</link>
  <pubDate>Thu, 20 Jan 2011 02:23:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/should-i-use-sql-or-no-sql</guid>
  <description/>
  <content:encoded><![CDATA[<p>Determining if you should use SQL or one of the many NoSQL solutions can be a difficult decision to make. &nbsp;Hopefully this guide will help you in your decision making process...</p><p><strong>Do you need a lot of flexibility in your read queries?</strong><br /><em>YES</em>: SQL is the best choice for query flexibility since it has a well understood language for both simple and complex queries.&nbsp;MongoDB is also a good choice since it has some of the features of the SQL query syntax and you can add indexes on both regular and embedded documents.<br /><em>NO</em>: base your decision on other question(s).</p><p class="p2"><strong>Is it acceptable to take your application down in order to change the schema?</strong><br /><em>YES</em>: base your decision on other question(s). &nbsp;Note that if you are using MySQL and have a busy server, you will have to take your application down in order to change your schema.<br /><em>NO</em>: You really need to consider your NoSQL options or commercial SQL databases. &nbsp;MongoDB is great in the sense that it doesn't enforce a schema on your documents. &nbsp;Key/value databases also give a lot of flexibility in this area since they force the schema to be in the application and not the database. &nbsp;With MySQL, schema changes typically are blocking operations that will cause your application to hang. &nbsp;This can take from seconds to hours depending on many factors (database size, server performance, etc).</p><p class="p1"><strong>Do you need transactions?<br /></strong><em>YES</em>: Stick with MySQL or some other SQL database. &nbsp;SQL is the king of transactions. &nbsp;Some NoSQL solutions support limited forms of them (MongoDB, Redis).<br /><em>NO</em>: base your decision on other question(s).</p><p class="p2"><strong>Do your developers have experience modeling data for different kinds of databases (SQL, document, key/value, etc)?<br /></strong><em>YES</em>: base your decision on other question(s).<br /><em>NO</em>: Then they should start off by writing some experimental apps using different databases in order to learn their quirks. &nbsp;Every database has "gotchas" that you really want to learn about before you start writing your application. &nbsp;This is especially true of NoSQL solutions if you background is in SQL.</p><p class="p2"><strong>Is your IT staff or hosting provider willing and able to support your database?<br /></strong><em>YES</em>: base your decision on other question(s).<br /><em>NO</em>: Development costs are only one part of the picture. &nbsp;Once launched, it's going to need to be supported in production and every database solution requires specific knowledge in the areas of deployment, backups, monitoring, and performance tuning. &nbsp;You may be able to go with a hosted solution, a contractor, or full time staff if you don't want to support it on your own.</p><p class="p2"><strong>Is your application best served by using multiple types of databases at the same time?<br /></strong><em>YES</em>: It's becoming more common to combine different types of databases within a single application. &nbsp;For example, If your application does lots of increment operations (think ad server counting hits or clicks) then you could use the high performance counters in Redis or MongoDB along with using SQL to store everything else.<br /><em>NO</em>: base your decision on other question(s).</p><p class="p2"><strong>Is scalability a concern?<br /></strong><em>YES</em>: You're going to need to determine the vertical and horizontal scalability limitations of the various databases. &nbsp;Some databases like MySQL will scale vertically without much effort (just get a faster server). &nbsp;Other solutions such as Cassandra and Riak focus on scaling horizontally (add more servers), but then limit you in other ways. &nbsp;Another area to think about is scaling reads vs writes. &nbsp;Many database products have different techniques for scaling each (for example, MySQL slaves only scale reads).<br /><em>NO</em>: base your decision on other question(s).</p><p class="p2">Are you considering NoSQL for one of your projects? &nbsp;If so I'd like to hear from you.</p><p>&nbsp;</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[Determining if you should use SQL or one of the many NoSQL solutions can be a difficult decision to make. Hopefully this guide will help you in your decision making process... Do you need a lot of flexibility in your read queries?YES: SQL is the b...]]></excerpt:encoded>
  <wp:post_id>20</wp:post_id>
  <wp:post_date>2011-01-20 02:23:00</wp:post_date>
  <wp:post_date_gmt>2011-01-20 02:23:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>should-i-use-sql-or-no-sql</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="databases"><![CDATA[databases]]></category>
  <category domain="post_tag" nicename="nosql"><![CDATA[nosql]]></category>
  <category domain="post_tag" nicename="sql"><![CDATA[sql]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Fiona: Rails 3 configuration data engine </title>
  <link>http://remesch.com/2012/03/09/fiona-rails-3-configuration-data-engine/</link>
  <pubDate>Fri, 09 Mar 2012 02:58:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/fiona-rails-3-configuration-data-engine</guid>
  <description/>
  <content:encoded><![CDATA[<p>A few months back, my friend Mike and I build <a href="https://github.com/BlueFrogGaming/fiona">Fiona</a>.&nbsp; We're calling it a "configuration data engine" since we use it store various kinds of template data in our games.&nbsp; Our template data includes settings, entity properties, maps, and assets.&nbsp; With Fiona, all of this data can easily be stored in a single database table.&nbsp; All templates and associated properties are stored in two tables using STI.&nbsp; Data is easy to backup/restore and customize per environment.&nbsp; The gem is still in the early stages, but the foundation is there.&nbsp; As time permits we'll increase test coverage and the feature set.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[A few months back, my friend Mike and I build Fiona. We're calling it a "configuration data engine" since we use it store various kinds of template data in our games. Our template data includes settings, entity properties, maps, and assets. With F...]]></excerpt:encoded>
  <wp:post_id>21</wp:post_id>
  <wp:post_date>2012-03-09 02:58:00</wp:post_date>
  <wp:post_date_gmt>2012-03-09 02:58:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fiona-rails-3-configuration-data-engine</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>168</wp:comment_id>
    <wp:comment_author><![CDATA[Columbus]]></wp:comment_author>
    <wp:comment_author_email>columbusiacovelli@yahoo.de</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/ikenna_okpala</wp:comment_author_url>
    <wp:comment_author_IP>23.227.110.13</wp:comment_author_IP>
    <wp:comment_date>2014-07-11 07:46:29</wp:comment_date>
    <wp:comment_date_gmt>2014-07-11 11:46:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi there to every body, it's my first visit of this blog; this webpage consists of amazing and genuinely excellent material in favor of visitors.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1405079189.9018700122833251953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1405079189</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2014-07-11 11:46:30</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1435530243.9507639408111572265625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Pop Dat: now available on iPhone and Android</title>
  <link>http://remesch.com/2011/08/31/pop-dat-now-available-on-iphone-and-android/</link>
  <pubDate>Wed, 31 Aug 2011 02:40:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/pop-dat-now-available-on-iphone-and-android</guid>
  <description/>
  <content:encoded><![CDATA[Pop Dat is our latest mobile game for <a href="http://itunes.apple.com/us/app/pop-dat-free/id455149472">Apple iOS</a> and <a href="https://market.android.com/details?id=com.bluefroggaming.popdat&amp;feature=search_result">Google Android</a>.  We're very proud of it considering it was our first hobby project.

It had some unique goals:
<ul>
	<li>Low cost: We had a very small budget for art and sound.  All programming was done for free in our spare time.</li>
	<li>Cross platform:  We used <a href="http://www.anscamobile.com/corona/">Corona SDK</a> in order program once and deploy on multiple platforms.</li>
	<li>Realistic scope: As an evenings &amp; weekends project, we had to be realistic about what we could launch in a reasonable amount of time.</li>
</ul>
The team did a great job at driving this project to completion.  Please check it out and let us know what you think.  You can also read the official Blue Frog Gaming announcement on our <a href="http://blog.bluefroggaming.com/?p=121">blog</a>.
<div class="p_embed p_image_embed"></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[Pop Dat is our latest mobile game for Apple iOS and Google Android. We're very proud of it considering it was our first hobby project. It had some unique goals: Low cost: We had a very small budget for art and sound. All programming was done for f...]]></excerpt:encoded>
  <wp:post_id>22</wp:post_id>
  <wp:post_date>2011-08-31 02:40:00</wp:post_date>
  <wp:post_date_gmt>2011-08-31 02:40:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pop-dat-now-available-on-iphone-and-android</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="android"><![CDATA[android]]></category>
  <category domain="post_tag" nicename="games"><![CDATA[games]]></category>
  <category domain="post_tag" nicename="ios"><![CDATA[ios]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11558416]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Networking for Tribe</title>
  <link>http://remesch.com/2013/02/02/networking-for-tribe/</link>
  <pubDate>Sat, 02 Feb 2013 16:49:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/networking-for-tribe</guid>
  <description/>
  <content:encoded><![CDATA[Recently I put together two new Ruby gems called <a title="Tribe EM" href="https://github.com/chadrem/tribe_em">Tribe EM</a> and <a title="Tribe EM AMF Socket" href="https://github.com/chadrem/tribe_em_amfsocket">Tribe EM AMF Socket</a>.  Both gems build on top of my <a title="Tribe" href="https://github.com/chadrem/tribe">Tribe</a> gem.

Tribe EM bridges the gap between Tribe and <a title="EventMachine" href="http://rubyeventmachine.com/">EventMachine</a>.  Currently it provides basic TCP server functionality for Tribe actors.  My intent is to use this as a base for implementing higher-level protocols such as HTTP.

Tribe EM AMF Socket is a wrapper around my existing <a title="AMF Socket - Ruby" href="https://github.com/chadrem/amf_socket_ruby">AMF Socket - Ruby</a> gem.  Currently it only supports messages and not requests (RPC).  I believe this to be a reasonable limitation for now since AMF Socket messages fit in very well with Tribe's asynchronous messaging system.

One key difference between the two gems is what I refer to as native vs wrapper implementations:

<span style="text-decoration:underline;">Native</span>: The Tribe::EM::Connection class is considered native since it pushes the higher level protocol implementation onto the actor threads.  This results in greater scalability since actors take advantage of multi-core systems (especially on JRuby).

<span style="text-decoration:underline;">Wrapper</span>: The Tribe::EM::AmfSocket::Connection class is considered a wrapper since it wraps the AMF Socket gem for use with Tribe.  This means that a lot of work (serialization, deserialization, framing, keep alives, etc) are all performed on the EventMachine thread.  The result is lower performance than a native implementation, but less coding since I can reuse the existing Ruby implementation of AMF Socket.

Both gem are designed to be easily customized.  Feel free to contact me with your custom protocol implementations so that I can add them to the Tribe EM homepage.]]></content:encoded>
  <excerpt:encoded><![CDATA[Recently I put together two new Ruby gems called Tribe EM and Tribe EM AMF Socket. Both gems build on top of my Tribe gem: Tribe EM bridges the gap between Tribe and EventMachine. Currently it provides basic TCP server functionality for Tribe acto...]]></excerpt:encoded>
  <wp:post_id>23</wp:post_id>
  <wp:post_date>2013-02-02 16:49:00</wp:post_date>
  <wp:post_date_gmt>2013-02-02 16:49:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>networking-for-tribe</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="eventmachine"><![CDATA[eventmachine]]></category>
  <category domain="post_tag" nicename="jruby"><![CDATA[jruby]]></category>
  <category domain="post_tag" nicename="networking"><![CDATA[networking]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="post_tag" nicename="tribe"><![CDATA[tribe]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11558416]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>AMF Socket - Easy Actionscript Networking</title>
  <link>http://remesch.com/2012/08/16/amf-socket/</link>
  <pubDate>Thu, 16 Aug 2012 23:24:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/amf-socket</guid>
  <description/>
  <content:encoded><![CDATA[<p>Recently, I created <a href="https://github.com/chadrem/amf_socket" title="AMF Socket">AMF Socket</a>.</p><p>AMF Socket is a bi-directional remote procedure call (RPC) system for Adobe Actionscript programs. This library aims to make high quality and free RPC accessible to all of the Flash platforms (web, mobile, and desktop). Using this library you can easily add event driven network functionality to your Flash applications without having to deal with the low level details. High performance and low latency is accomplished through the use of persistent TCP/IP sockets and Flash's native serialization format (AMF). Due to the use of AMF, you can send primitives, hashes, arrays, and even your custom classes over the network. &nbsp;AMF Socket tries to be the "easy button" for Flash networking by hiding as many details as possible.</p><p>I've also created a <a href="https://github.com/chadrem/amf_socket_ruby" title="AMF Socket - Ruby">Ruby implementation</a> for the server side. &nbsp;Implementations for other languages should be fairly staright forward and I welcome them. &nbsp;Feel free to contact me if you are interested in creating one.</p><p>&nbsp;</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[Recently, I created AMF Socket. AMF Socket is a bi-directional remote procedure call (RPC) system for Adobe Actionscript programs. This library aims to make high quality and free RPC accessible to all of the Flash platforms (web, mobile, and deskt...]]></excerpt:encoded>
  <wp:post_id>24</wp:post_id>
  <wp:post_date>2012-08-16 23:24:00</wp:post_date>
  <wp:post_date_gmt>2012-08-16 23:24:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>amf-socket</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actionscript"><![CDATA[actionscript]]></category>
  <category domain="post_tag" nicename="eventmachine"><![CDATA[eventmachine]]></category>
  <category domain="post_tag" nicename="flash"><![CDATA[flash]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Torquebox Investigation</title>
  <link>http://remesch.com/2012/05/28/torquebox-investigation/</link>
  <pubDate>Mon, 28 May 2012 16:06:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/torquebox-investigation</guid>
  <description/>
  <content:encoded><![CDATA[My good friend <a href="http://crunchtools.com/">Scott McCarty</a> mentioned that I should checkout the <a href="http://torquebox.org/">Torquebox</a> project and so I spent my morning with it.  Below is a summary of my experience.

<span style="font-size:medium;"><strong>Installation</strong></span>

<strong> </strong>You have to choose one of two install paths:
<ul>
	<li>The large download that contains everything you need (JRuby, Torquebox, etc).</li>
	<li>Manual instalation of JRuby and then the torquebox-server gem.</li>
</ul>
I went with the gem option since I already had Jruby installed and I have an existing Rails app that is Jruby compatible.  There is only one area I got hung up on.  JRuby supports both the old (1.8) and new (1.9) ruby syntax.  All of my new projects use 1.9, but the current version of JRuby (1.6.7) defaults to 1.8 syntax.  The fix was simple once I learned how deployment descriptors work in Torquebox.  I had to drop the below torquebox.rb in my Rail's root folder:
<pre>  TorqueBox.configure do
    ruby do
      version "1.9"
    end
  end</pre>
<span style="font-size:medium;"><strong>Workflow</strong></span>

Workflow for developing a Torquebox enhanced Rails app is the same as a normal Rails one.  The only difference is I had to replace running "rails server" with "torquebox deploy" and "torquebox run".  I still need to run "rails console" in a separate terminal.  Overall the Torquebox documentation is high quality and made it more or less painless.
<p class="p1"><strong style="font-size:medium;">Rails Console</strong></p>
<p class="p1">The Rails console is slower to startup with JRuby.  I've found a number of useful <a href="http://blog.headius.com/2010/03/jruby-startup-time-tips.html">recommendations</a>, but none of them completely fix the problem.  My best recommendation is to make sure you keep your code compatible with the "reload!" method and avoid restarts.</p>
<strong style="font-size:medium;">Testing</strong>
<p class="p1">Next on my list of things to do is to figure out if people have Spork and Guard working with JRuby.  Using this combo of gems I have a really nice continuous testing solution with C Ruby.  I would hate to give this up with Torquebox.</p>
<strong style="font-size:medium;">Vim</strong>
<p class="p1">One unexpected side effect is that various commands in Vim are slow due to switching to JRuby. Vim appears to stall for a short, but noticable time when some plugins fire up JRuby processes.  I use a highly customized Vim using the <a href="https://github.com/carlhuda/janus">Janus</a> distribution.</p>
<strong style="font-size:medium;">New Rails Projects</strong>

I haven't tried it, but I noticed that Torquebox comes with a command for generating new apps.  My guess is this is the way to go since it probably generates a Rails app that is fully patched for JRuby and Torquebox.
<p class="p1"><strong style="font-size:medium;">Converting Existing Rails Projects</strong></p>
<p class="p1">My project was originally built for C ruby 1.9, MySQL, and Rails 3.2.  This meant I had to do my normal hacking on Gemfile and database.yml to make it simultaneously compatible with both C Ruby and JRuby.  Fortunately for me, all of my gems were compatible with JRuby including a few that integrate with C code via FFI.</p>
<p class="p1"><span style="font-size:medium;"><strong>Deployment</strong></span></p>
<p class="p1">Unfortunately I didn't take this experiment to the deployment phase. The documendation and packages for Fedora/RHEL look fairly straightforward for those with Linux sysadmin skills. It will most likely help to read over the JBoss documentation too. You can also deploy to Red Hat's Openshift cloud.</p>
<p class="p1"><strong style="font-size:medium;">The Real Benefits</strong></p>
<p class="p1">The real benefit of Torquebox is how it exposes the JBoss feature set to a standard Rails app.  In some cases it remaps standard Rails APIs to JBoss (like with caching and sessions).  Other features (such as job scheduling and messaging) aren't built into Rails so I believe they wrote wrappers.  Effectively they are giving you a more complete platform for building complex apps instead of you having to assemble one yourself from open source components.  Of course you can also pay Red Hat for support which is a huge win for some companies.  The JBoss, Torquebox, and JRuby teams are sponsored by Red Hat so you know you'll be well taken care of.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[My good friend Scott McCarty mentioned that I should checkout the Torquebox project and so I spent my morning with it. Below is a summary of my experience. Installation You have to choose one of two install paths: The large download that contains ...]]></excerpt:encoded>
  <wp:post_id>25</wp:post_id>
  <wp:post_date>2012-05-28 16:06:00</wp:post_date>
  <wp:post_date_gmt>2012-05-28 16:06:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>torquebox-investigation</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="post_tag" nicename="torquebox"><![CDATA[torquebox]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11558416]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c2cb9c31b2a80edcb89bc4004779276a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c3f7a6d1df5a561bb43cfc1bc518399e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Workers and Tribe - Ruby threading simplified</title>
  <link>http://remesch.com/2013/01/22/workers-and-tribe-ruby-threading-simplified/</link>
  <pubDate>Tue, 22 Jan 2013 01:57:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/workers-and-tribe-ruby-threading-simplified</guid>
  <description/>
  <content:encoded><![CDATA[<p>Recently I've created two new Ruby gems known as <a href="https://github.com/chadrem/workers" title="Workers">Workers</a> and <a href="https://github.com/chadrem/tribe" title="Tribe">Tribe</a>.</p><p>The <a href="https://github.com/chadrem/workers" title="Workers">Workers</a> gem turns low-level operating system threads into simple to use event-driven workers and worker pools. &nbsp;This allows you to focus on message passing instead of complex thread management. &nbsp;As an added bonus, it includes a timer system that can tell your workers to execute work in the future.</p><p>The <a href="https://github.com/chadrem/tribe" title="Tribe">Tribe</a> gem builds on top of Workers in order to implement the <a href="http://en.wikipedia.org/wiki/Actor_model" title="actor model">actor model</a>. It specifically focuses on event-driven actors such that each thread manages one or more actors. &nbsp;This way the system can support many more actors than is possible with implementations that force a 1:1 thread to actor relationship. &nbsp;A simple benchmark demonstrating one million actors using 20 threads can be found on the <a href="https://github.com/chadrem/tribe/wiki/Performance" title="performance">performance</a> wiki page.</p><p>Both gems have been tested with MRI Ruby 1.9.3 and JRuby 1.7. &nbsp;Due to MRI's thread limitations, it is highly recommended that you use JRuby if you are concerned about multi-core CPU performance.</p><div>Inspiration comes from <a href="http://www.erlang.org/" title="Erlang">Erlang</a>, <a href="http://www.scala-lang.org/" title="Scala">Scala</a>, <a href="http://akka.io/" title="Akka">Akka</a>, and <a href="http://celluloid.io/" title="Celluloid">Celluloid</a>.&nbsp;</div><p>&nbsp;</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[Recently I've created two new Ruby gems known as Workers and Tribe. The Workers gem turns low-level operating system threads into simple to use event-driven workers and worker pools. This allows you to focus on message passing instead of complex t...]]></excerpt:encoded>
  <wp:post_id>26</wp:post_id>
  <wp:post_date>2013-01-22 01:57:00</wp:post_date>
  <wp:post_date_gmt>2013-01-22 01:57:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>workers-and-tribe-ruby-threading-simplified</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actors"><![CDATA[actors]]></category>
  <category domain="post_tag" nicename="jruby"><![CDATA[jruby]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="post_tag" nicename="threading"><![CDATA[threading]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ef55b78503874f8793a87f9494c5c91a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[Darío Javier Cravero (@dariocravero)]]></wp:comment_author>
    <wp:comment_author_email>dariocravero@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/dariocravero</wp:comment_author_url>
    <wp:comment_author_IP>201.252.218.161</wp:comment_author_IP>
    <wp:comment_date>2013-02-25 02:38:58</wp:comment_date>
    <wp:comment_date_gmt>2013-02-25 07:38:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Chad,

Thanks for your work on Tribe and Workers, both are great and their performance is thrilling!

Correct me if I'm wrong, but Tribe should work as a Celluloid replacement, shouldn't it?

I've tried porting a few examples and it gets a bit confusing when the scenario gains complexity. Would you have some hints or a guide/converted app to look at to get a better idea of what should be taken into consideration while migrating?

Thanks!
Darío]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1361777939.14116001129150390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>twitter</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>http://a0.twimg.com/profile_images/1570700449/86cf28e06e2d8a03d44895d4a7df887e_normal.jpeg</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>174279369</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1361804260</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1361804261.4022300243377685546875;s:7:"message";s:46:"chadrem changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"chadrem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-02-25 07:38:58</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[chadrem]]></wp:comment_author>
    <wp:comment_author_email>chad@remesch.com</wp:comment_author_email>
    <wp:comment_author_url>http://remesch.com</wp:comment_author_url>
    <wp:comment_author_IP>70.60.184.133</wp:comment_author_IP>
    <wp:comment_date>2013-02-25 10:04:35</wp:comment_date>
    <wp:comment_date_gmt>2013-02-25 15:04:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Darío,

Tribe and Celluloid are similar at the high level, but I prefer not to think of one as a replacement for the other since each has plusses and minus.  Also, Celluloid is more mature (more features, hours in production, etc).  Tribe is currently somewhat experimental (I'll be adding features as I need them).  The main reason I created Tribe is to build custom game servers so it may be missing features for your application.  Unfortunately I don't have the guide you are looking for and probably won't have time to create one in the immediate future.  Can you give me an example of what you are having trouble with?  Thank you for your feedback.

  -Chad]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>4</wp:comment_parent>
    <wp:comment_user_id>11558416</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1361804675</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1361804676.01377391815185546875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"chadrem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-02-25 15:04:35</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6</wp:comment_id>
    <wp:comment_author><![CDATA[Darío Javier Cravero (@dariocravero)]]></wp:comment_author>
    <wp:comment_author_email>dariocravero@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/dariocravero</wp:comment_author_url>
    <wp:comment_author_IP>201.252.218.161</wp:comment_author_IP>
    <wp:comment_date>2013-02-25 23:07:26</wp:comment_date>
    <wp:comment_date_gmt>2013-02-26 04:07:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey Chad,

Thanks a mill for your answer!..

We're basically looking at reimplementing Padrino's core and looking at different models to implement in order to get an even better performance. I'll dig deeper and try to understand if this is a good fit and will come back with doubts as they arise with clear examples and code :)

Regards,
Darío]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>5</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1361851648</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1361851648.7681939601898193359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>twitter</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>http://a0.twimg.com/profile_images/1570700449/86cf28e06e2d8a03d44895d4a7df887e_normal.jpeg</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>174279369</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-02-26 04:07:26</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7</wp:comment_id>
    <wp:comment_author><![CDATA[chadrem]]></wp:comment_author>
    <wp:comment_author_email>chad@remesch.com</wp:comment_author_email>
    <wp:comment_author_url>http://remesch.com</wp:comment_author_url>
    <wp:comment_author_IP>209.85.216.49</wp:comment_author_IP>
    <wp:comment_date>2013-02-26 10:40:40</wp:comment_date>
    <wp:comment_date_gmt>2013-02-26 15:40:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Darío, 

I'm actually working on a TCP and HTTP server framework that builds on top of Tribe.  This framework will include things like migrations, integrated activerecord, a console, etc.  I don't have a planned release date. 

There are a number of differences between Tribe and Celluloid so I recommend checking out both in detail.  I'm not a Celluloid expert so please correct me if I'm wrong on any of the below. 

Celluloid actors use a dedicated thread plus one or more fibers.  I think fibers in JRuby are implemented using threads so I assume this means each actor will consume 2 or more OS threads at any given time (1 thread per actor on MRI).  Based on this, you probably want to keep your total number of actors in the thousands or less due to thread overhead and context switching. 

Tribe actors use a shared thread pool by default and are event driven.  This means Tribe can supports at least 1 million actors in memory.  It also gives you the option to create actors with dedicated threads (similar to Celluloid actors) for the situations where it makes sense.  My specific application (game servers) requires a large number of actors so this event driven approach makes a lot of sense for me. 

Hopefully this info helps.  Tribe is still a young project so it's going to take time to evolve and document the best practices.  Please let me know what you find as I appreciate any feedback you have to offer. 

 -Chad]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6</wp:comment_parent>
    <wp:comment_user_id>11558416</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1361893240</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1361893240.225450038909912109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"chadrem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-02-26 15:40:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>18</wp:comment_id>
    <wp:comment_author><![CDATA[aemadrid]]></wp:comment_author>
    <wp:comment_author_email>aemadrid@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>98.202.161.202</wp:comment_author_IP>
    <wp:comment_date>2013-05-01 16:42:30</wp:comment_date>
    <wp:comment_date_gmt>2013-05-01 20:42:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Very interesting. Are you closer in releasing your framework?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>280463</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1367440950.5832889080047607421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"aemadrid";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1367441139</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1367441140.213993072509765625;s:7:"message";s:46:"chadrem changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"chadrem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-05-01 20:42:30</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>20</wp:comment_id>
    <wp:comment_author><![CDATA[chadrem]]></wp:comment_author>
    <wp:comment_author_email>chad@remesch.com</wp:comment_author_email>
    <wp:comment_author_url>http://remesch.com</wp:comment_author_url>
    <wp:comment_author_IP>98.103.169.186</wp:comment_author_IP>
    <wp:comment_date>2013-05-01 16:49:10</wp:comment_date>
    <wp:comment_date_gmt>2013-05-01 20:49:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for your interest in the project.  Unfortunately it's not ready for release yet.  I'm currently fleshing it out and and building a small sample application in order to test it out, find missing features, and develop best practices.  I don't have an ETA at this time since this is a hobby project of mine.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>18</wp:comment_parent>
    <wp:comment_user_id>11558416</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1367441351</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1367441351.5864429473876953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"chadrem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-05-01 20:49:10</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>21</wp:comment_id>
    <wp:comment_author><![CDATA[aemadrid]]></wp:comment_author>
    <wp:comment_author_email>aemadrid@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>98.202.161.202</wp:comment_author_IP>
    <wp:comment_date>2013-05-01 16:51:57</wp:comment_date>
    <wp:comment_date_gmt>2013-05-01 20:51:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Cool. I'm always interested in concurrency in Ruby. One thing that I see missing from Celluloid is futures. Seems like a very important part. Or maybe I'm missing how you'd get values asynchronously with Tribe/Workers.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>20</wp:comment_parent>
    <wp:comment_user_id>280463</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1367441517</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1367441517.9255549907684326171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"aemadrid";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-05-01 20:51:57</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>22</wp:comment_id>
    <wp:comment_author><![CDATA[chadrem]]></wp:comment_author>
    <wp:comment_author_email>chad@remesch.com</wp:comment_author_email>
    <wp:comment_author_url>http://remesch.com</wp:comment_author_url>
    <wp:comment_author_IP>98.103.169.186</wp:comment_author_IP>
    <wp:comment_date>2013-05-01 17:07:39</wp:comment_date>
    <wp:comment_date_gmt>2013-05-01 21:07:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Tribe doesn't currently support futures, but they are on the todo list.  They aren't required to build apps, but are definitely nice to have.  You can emulate them by sending messages between actors to signal when work on a given task has been completed.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>20</wp:comment_parent>
    <wp:comment_user_id>11558416</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1367442459</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1367442459.7398951053619384765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"chadrem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-05-01 21:07:39</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>23</wp:comment_id>
    <wp:comment_author><![CDATA[aemadrid]]></wp:comment_author>
    <wp:comment_author_email>aemadrid@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>98.202.161.202</wp:comment_author_IP>
    <wp:comment_date>2013-05-01 17:09:48</wp:comment_date>
    <wp:comment_date_gmt>2013-05-01 21:09:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Another question. How do you handle failures/exceptions: do you let it die and create another actor? I see the callbacks but I'm not sure how you work it out.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>280463</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1367442588</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1367442588.240583896636962890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"aemadrid";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-05-01 21:09:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>25</wp:comment_id>
    <wp:comment_author><![CDATA[aemadrid]]></wp:comment_author>
    <wp:comment_author_email>aemadrid@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>98.202.161.202</wp:comment_author_IP>
    <wp:comment_date>2013-05-01 17:23:09</wp:comment_date>
    <wp:comment_date_gmt>2013-05-01 21:23:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Cool, thanks. I'll give it a shot.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>23</wp:comment_parent>
    <wp:comment_user_id>280463</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1367443389</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1367443389.6426470279693603515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"aemadrid";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-05-01 21:23:09</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>26</wp:comment_id>
    <wp:comment_author><![CDATA[chadrem]]></wp:comment_author>
    <wp:comment_author_email>chad@remesch.com</wp:comment_author_email>
    <wp:comment_author_url>http://remesch.com</wp:comment_author_url>
    <wp:comment_author_IP>98.103.169.186</wp:comment_author_IP>
    <wp:comment_date>2013-05-01 17:23:49</wp:comment_date>
    <wp:comment_date_gmt>2013-05-01 21:23:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Currently, each actor calls the exception_handler on failure so you can override this method to handle it however you want.  Supervisors are also on the todo list so that actors can monitor other actors for failure.  For now you'll need to emulate this behavior yourself if you need it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>23</wp:comment_parent>
    <wp:comment_user_id>11558416</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1367443429</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1367443429.4854300022125244140625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"chadrem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-05-01 21:23:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>252</wp:comment_id>
    <wp:comment_author><![CDATA[kup-program.pl]]></wp:comment_author>
    <wp:comment_author_email>melainenumbers@yahoo.de</wp:comment_author_email>
    <wp:comment_author_url>http://kup-program.pl/rozwoj-komputeryzacji-w-naszych-czasach</wp:comment_author_url>
    <wp:comment_author_IP>93.118.77.111</wp:comment_author_IP>
    <wp:comment_date>2014-09-24 19:43:16</wp:comment_date>
    <wp:comment_date_gmt>2014-09-24 23:43:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mentioned below are fours ways in which a broker is able to 
help you get a greater price for your business. In the previous section, I offered up three questions you must use as a focal 
point when creating a business model. The tire producers 
in the United States were affected positively because they were competing 
with artificial competition.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1411602196.3782379627227783203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>1423982924</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1411602196</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2014-09-24 23:43:17</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1435530244.3877429962158203125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Observation - Observer pattern for Ruby</title>
  <link>http://remesch.com/2012/08/16/observation/</link>
  <pubDate>Thu, 16 Aug 2012 23:42:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/observation</guid>
  <description/>
  <content:encoded><![CDATA[<p>Today I hacked together <a href="https://github.com/chadrem/observation" title="Observation">Observation</a>, a simple implementation of the Observer pattern. &nbsp;Inspiration for the API comes from Adobe Actionscript's event system.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[Today I hacked together Observation, a simple implementation of the Observer pattern. Inspiration for the API comes from Adobe Actionscript's event system.]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>2012-08-16 23:42:00</wp:post_date>
  <wp:post_date_gmt>2012-08-16 23:42:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>observation</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Setup Notes: rails3 + rspec2 + spork + autotest </title>
  <link>http://remesch.com/2012/03/01/setup-notes-for-really-fast-tests-rails3-rspe/</link>
  <pubDate>Thu, 01 Mar 2012 01:31:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/setup-notes-for-really-fast-tests-rails3-rspe</guid>
  <description/>
  <content:encoded><![CDATA[<p>See my&nbsp;<a href="https://gist.github.com/1864155"> setup notes</a> on Github.&nbsp; The result is really fast and automated tests for your Rails 3 project.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[See my setup notes on Github. The result is really fast and automated tests for your Rails 3 project.]]></excerpt:encoded>
  <wp:post_id>28</wp:post_id>
  <wp:post_date>2012-03-01 01:31:00</wp:post_date>
  <wp:post_date_gmt>2012-03-01 01:31:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>setup-notes-for-really-fast-tests-rails3-rspe</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="android"><![CDATA[android]]></category>
  <category domain="post_tag" nicename="rspec"><![CDATA[rspec]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="post_tag" nicename="setupnotes"><![CDATA[setupnotes]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Spinal Tap - admin console for Ruby processes</title>
  <link>http://remesch.com/2012/07/11/spinal-tap-backdoor-into-your-ruby-processes/</link>
  <pubDate>Wed, 11 Jul 2012 03:01:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/spinal-tap-backdoor-into-your-ruby-processes</guid>
  <description/>
  <content:encoded><![CDATA[<p>Today I released a very early/alpha version of <a href="https://github.com/chadrem/spinal_tap">Spinal Tap</a>. &nbsp;I deal with a lot of long running Ruby processes (crons, daemons, etc) and I occassionally need to debug them while they are running. &nbsp;Thus Spinal Tap was born. &nbsp;The future vision includes statistics tracking, custom defined commands, and much more. &nbsp;Think of it as a backdoor into your Ruby processes :-) &nbsp;Thanks go to my good friend <a href="http://crunchtools.com/">Scott McCarty</a> for brainstorming the long term vision of the project.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[Today I released a very early/alpha version of Spinal Tap. I deal with a lot of long running Ruby processes (crons, daemons, etc) and I occassionally need to debug them while they are running. Thus Spinal Tap was born. The future vision includes s...]]></excerpt:encoded>
  <wp:post_id>29</wp:post_id>
  <wp:post_date>2012-07-11 03:01:00</wp:post_date>
  <wp:post_date_gmt>2012-07-11 03:01:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spinal-tap-backdoor-into-your-ruby-processes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_author</wp:meta_key>
    <wp:meta_value><![CDATA[Chad Remesch]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Open Source</title>
  <link>http://remesch.com/open-source/</link>
  <pubDate>Sun, 17 Feb 2013 15:12:21 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.wordpress.com/?page_id=33</guid>
  <description/>
  <content:encoded><![CDATA[Below is a list of my open source projects:
<ul>
	<li><a title="Officer" href="https://github.com/chadrem/officer">Officer</a></li>
	<li><a title="Market Bot" href="https://github.com/chadrem/market_bot">Market Bot</a></li>
	<li><a title="Fiona" href="https://github.com/bluefroggaming/fiona">Fiona</a></li>
	<li><a title="AMF Socket" href="https://github.com/chadrem/amf_socket">AMF Socket</a></li>
	<li><a title="AMF Socket - Ruby" href="https://github.com/chadrem/amf_socket_ruby">AMF Socket - Ruby</a></li>
	<li><a title="Spinal Tap" href="https://github.com/chadrem/spinal_tap">Spinal Tap</a></li>
	<li><a title="Observation" href="https://github.com/chadrem/observation">Observation</a></li>
	<li><a title="Workers" href="https://github.com/chadrem/workers">Workers</a></li>
	<li><a title="Tribe" href="https://github.com/chadrem/tribe">Tribe</a></li>
	<li><a title="Tribe EM" href="https://github.com/chadrem/tribe_em">Tribe EM</a></li>
	<li><a title="Tribe EM AMF Socket" href="https://github.com/chadrem/tribe_em_amfsocket">Tribe EM AMF Socket</a></li>
	<li><a title="Totem" href="https://github.com/chadrem/totem">Totem</a></li>
	<li><a title="Totem - Activerecord" href="https://github.com/chadrem/totem_activerecord">Totem Activerecord</a></li>
	<li><a title="Raad - Totem" href="https://github.com/chadrem/raad_totem">Raad - Totem</a></li>
	<li><a title="Easy Lua" href="https://github.com/chadrem/easy_lua">Easy Lua</a></li>
	<li><a href="https://github.com/chadrem/reactomatic">Reactomatic</a></li>
	<li><a href="https://github.com/chadrem/filter_chain">Filter Chain</a></li>
	<li><a href="https://github.com/chadrem/oskie_rpc">Oskie RPC</a></li>
</ul>
All of these and more are available on my <a title="My Github profile" href="https://github.com/chadrem">Github profile</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2013-02-17 10:12:21</wp:post_date>
  <wp:post_date_gmt>2013-02-17 15:12:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>open-source</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11558416]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>About</title>
  <link>http://remesch.com/about-2/</link>
  <pubDate>Sun, 17 Feb 2013 15:17:33 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.wordpress.com/?page_id=37</guid>
  <description/>
  <content:encoded><![CDATA[<ul>
	<li><span style="line-height:1.714285714;font-size:1rem;">Co-founder and CTO of </span><a style="line-height:1.714285714;font-size:1rem;" title="Blue Frog Gaming" href="http://bluefroggaming.com/">Blue Frog Gaming</a><span style="line-height:1.714285714;font-size:1rem;">.</span></li>
	<li><a title="My Github profile" href="https://github.com/chadrem">Open source</a> developer.</li>
	<li>Chief hobbyist at <a title="Droid Meter" href="https://droidmeter.com/">Droid Meter</a>.</li>
	<li><a title="Y Combinator" href="http://ycombinator.com/">Y Combinator</a> alumni (Summer 2007).</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2013-02-17 10:17:33</wp:post_date>
  <wp:post_date_gmt>2013-02-17 15:17:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11558416]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Workers - New Features</title>
  <link>http://remesch.com/2013/05/17/workers-new-features/</link>
  <pubDate>Sat, 18 May 2013 03:15:43 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/?p=57</guid>
  <description/>
  <content:encoded><![CDATA[Recently I added a number of features to my <a title="Workers" href="https://github.com/chadrem/workers">Workers</a> gem:

The <strong>Task and TaskGroup classes</strong> make it even easier to parallelize expensive computations (and blocking IO operations) using background threads.  They build on top of worker pools and standardize on various features such as success/failure handling, delayed execution, and arguments.

<strong>Parallel Map</strong> is syntactic sugar built on top of tasks and task groups.  It works very similar to Ruby's standard Array#map method except each element is mapped in parallel.

<strong>Pools are now dynamically resizable</strong>.  The long term vision for this feature is to experiment with auto-resizing algorithms that adapt to an applications load.  In the short term it is mostly useful for quickly changing the size of the default pool (currently set to 20 workers) without having to create a new one.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>57</wp:post_id>
  <wp:post_date>2013-05-17 23:15:43</wp:post_date>
  <wp:post_date_gmt>2013-05-18 03:15:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>workers-new-features</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="concurrency"><![CDATA[concurrency]]></category>
  <category domain="post_tag" nicename="jruby"><![CDATA[jruby]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="post_tag" nicename="threading"><![CDATA[threading]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="workers"><![CDATA[workers]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11558416]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tribe - Futures and Timers</title>
  <link>http://remesch.com/2013/05/25/tribe-futures-and-timers/</link>
  <pubDate>Sat, 25 May 2013 19:37:58 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/?p=85</guid>
  <description/>
  <content:encoded><![CDATA[I've added a few missing features to <a title="Tribe" href="https://github.com/chadrem/tribe">Tribe</a>- Timers and Futures.

<strong>Timers</strong> provide a way to tell an actor to do something in the future.  Tribe supports both one-shot and periodic timers so I believe all the major usage patterns are covered.  Adding this feature was fairly easy since all of the low level details are hidden in my <a title="Workers" href="https://github.com/chadrem/workers">Workers</a> gem.

<strong>Futures</strong> make it easy for an actor to ask another actor to perform an operation and return the result.  Previously you would have to use custom events and a lot of boilerplate code to accomplish this.  Both synchronous (blocking) and asynchronous (non-blocking) futures are supported.  More information on both types can be found in the readme file.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>85</wp:post_id>
  <wp:post_date>2013-05-25 15:37:58</wp:post_date>
  <wp:post_date_gmt>2013-05-25 19:37:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tribe-futures-and-timers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="concurrency"><![CDATA[concurrency]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="post_tag" nicename="threading"><![CDATA[threading]]></category>
  <category domain="post_tag" nicename="tribe"><![CDATA[tribe]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="workers"><![CDATA[workers]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11558416]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[chadremesch]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_3634454</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:35648897;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_3634454</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Totem - Ruby Without Rails</title>
  <link>http://remesch.com/2014/03/13/totem-ruby-without-rails/</link>
  <pubDate>Thu, 13 Mar 2014 17:06:34 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/?p=113</guid>
  <description/>
  <content:encoded><![CDATA[<p><a title="Totem" href="https://github.com/chadrem/totem">Totem</a> is my new Ruby gem for creating Ruby projects without having to depend on Rails.  Some of the features it provides are:</p><ul><li>Interactive console</li><li>Logging</li><li>Standard folder structure (very Rails like)</li><li>Environments (development, production, etc)</li><li>Generators</li><li>Easy database access (via an add-on)</li></ul><p><a title="Totem" href="https://github.com/chadrem/totem">Totem</a> and <a title="Totem - Activerecord" href="https://github.com/chadrem/totem_activerecord">Totem - Activerecord</a> seek to bring these and many other features to your non-Rails application.  Give it a try and feel free to contact me with your feedback.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>113</wp:post_id>
  <wp:post_date>2014-03-13 13:06:34</wp:post_date>
  <wp:post_date_gmt>2014-03-13 17:06:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>totem-ruby-without-rails</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="jruby"><![CDATA[jruby]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="post_tag" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
  <category domain="post_tag" nicename="totem"><![CDATA[totem]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[chadremesch]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/SExUDTDbrf]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_3634454</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:35648897;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Totem - Now with services (daemons)</title>
  <link>http://remesch.com/2014/03/15/totem-now-with-services-daemons/</link>
  <pubDate>Sat, 15 Mar 2014 14:47:00 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/?p=143</guid>
  <description/>
  <content:encoded><![CDATA[<p>As mentioned in my previous post, <a title="Totem" href="https://github.com/chadrem/totem">Totem</a> is a new Ruby project generator that I've put together.  One major missing feature was the ability to easily create services (also known as background processes or daemons).  To solve this problem, I have created an add-on gem called <a title="Raad - Totem" href="https://github.com/chadrem/raad_totem">Raad - Totem</a>.  It is a fork of the original <a title="Raad" href="https://github.com/colinsurprenant/raad">Raad</a> gem with a number of customizations to integrate it with a Totem project.  Much thanks go to the original Raad authors since they were able to make it work for both Ruby and JRjuby.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>143</wp:post_id>
  <wp:post_date>2014-03-15 10:47:00</wp:post_date>
  <wp:post_date_gmt>2014-03-15 14:47:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>totem-now-with-services-daemons</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="daemons"><![CDATA[daemons]]></category>
  <category domain="post_tag" nicename="jruby"><![CDATA[jruby]]></category>
  <category domain="post_tag" nicename="raad"><![CDATA[raad]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="post_tag" nicename="totem"><![CDATA[totem]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[chadremesch]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/XFTK9CiFnh]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_3634454</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:35648897;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_883debb4be92560a01334ac4310b135e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a7dc46dd5e681f03c8a48ef2459d5ec8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f0c76690882ad3ed3e1248a2e11dd922</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5585690d64523c46adcfe0746549d3d5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_76dfb78c0f904615d18d3f934816ae3c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Easy Lua - Add Lua scripts to ActionScript projects</title>
  <link>http://remesch.com/2014/03/31/easy-lua-the-easiest-way-to-add-lua-scripts-to-actionscript-projects/</link>
  <pubDate>Mon, 31 Mar 2014 15:44:58 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/?p=157</guid>
  <description/>
  <content:encoded><![CDATA[This past weekend I released a new open source project called <a title="Easy Lua" href="https://github.com/chadrem/easy_lua">Easy Lua</a>.  It's a wrapper around the Lua port that is included in Adobe's open source <a title="CrossBridge" href="https://github.com/adobe-flash/crossbridge">CrossBridge</a> project.  It lets you easily integrate Lua scripts into any ActionScript project (Flash, AIR, etc) with a minimum of headache and zero knowledge of Lua's C API.

CrossBridge is an amazing piece of technology that unfortunately receives little press.  In summary, it combines GCC with FreeBSD's libc and allows you to compile C/C++ code to ABC bytecode.  Since ABC is the native bytecode for Adobe Flash and AIR, you end up with a version of Lua that can fully integrate with all of Adobe's runtimes (mobile, desktop, and web).

The main use case for Easy Lua is to add Lua scripts to ActionScript based games.  I plan on using it to implement card game engines in Lua so that the engine can be used both on the client (single-player mode) and on the server (mutli-player mode).  This will mean less development time, more code reuse, and hopefully fewer bugs.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>157</wp:post_id>
  <wp:post_date>2014-03-31 11:44:58</wp:post_date>
  <wp:post_date_gmt>2014-03-31 15:44:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>easy-lua-the-easiest-way-to-add-lua-scripts-to-actionscript-projects</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actionscript"><![CDATA[actionscript]]></category>
  <category domain="post_tag" nicename="air"><![CDATA[AIR]]></category>
  <category domain="post_tag" nicename="crossbridge"><![CDATA[CrossBridge]]></category>
  <category domain="post_tag" nicename="flash"><![CDATA[flash]]></category>
  <category domain="post_tag" nicename="lua"><![CDATA[Lua]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[chadremesch]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/eSDcDcyOrH]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_3634454</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:35648897;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11558416]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_3634454</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Reactomatic - Reactor pattern for Ruby</title>
  <link>http://remesch.com/2015/07/07/reactomatic-reactor-pattern-for-ruby/</link>
  <pubDate>Tue, 07 Jul 2015 16:28:59 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/?p=184</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://github.com/chadrem/reactomatic">Reactomatic</a> is an implementation of the <a href="https://en.wikipedia.org/wiki/Reactor_pattern">Reactor Pattern</a> for Ruby.  It provides an <a href="https://github.com/eventmachine/eventmachine/">EventMachine</a> inspired interface for working with TCP/IP sockets in an asynchronous way.  Low level IO is provided by the <a href="https://github.com/celluloid/nio4r">nio4r</a> gem so it works well on both MRI and JRuby.  Design goals include thread safety and minimalist API.  Reactomatic wants to do one thing and do it well on all supported platforms.  This means many common EventMachine features aren't included such as application level protocols, timers, and thread pools.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>184</wp:post_id>
  <wp:post_date>2015-07-07 12:28:59</wp:post_date>
  <wp:post_date_gmt>2015-07-07 16:28:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>reactomatic-reactor-pattern-for-ruby</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="eventmachine"><![CDATA[eventmachine]]></category>
  <category domain="post_tag" nicename="jruby"><![CDATA[jruby]]></category>
  <category domain="post_tag" nicename="networking"><![CDATA[networking]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12482968700]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3634454;s:57:"https://twitter.com/chadremesch/status/618456696382361600";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3822061</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_3634454</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[chadremesch]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Filter Chain - Ruby gem for data manipulation</title>
  <link>http://remesch.com/2015/07/07/filter-chain-ruby-gem-for-data-manipulation/</link>
  <pubDate>Tue, 07 Jul 2015 16:47:24 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/?p=186</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://github.com/chadrem/filter_chain">Filter Chain</a> is a Ruby gem for processing data through a chain of filters in an object oriented style.  It includes a number of filters for simple tasks like compression, serialization, and multiplexing.

It is very common in Ruby to use blocks and functional style programming to manipulate data.  The below example squares each element in an array and then removes the odd values:
<p style="padding-left:30px;">[1,2,3,4,5].map { |i| i**2 }.reject { |i| i.odd? }</p>
Such one-liners are an amazing feature of Ruby and very useful on the console.  Unfortunately, they can really start to break down in more complex situations.  This is where Filter Chain can be really useful.

Unlike in the above example, filters in Filter Chain are dedicated classes with a simple API.  This means each filter can easily have it's own state, private helper methods, independent tests, and be reusable.  This is especially true for filters that include buffering, multithreading, and asynchronous IO.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>186</wp:post_id>
  <wp:post_date>2015-07-07 12:47:24</wp:post_date>
  <wp:post_date_gmt>2015-07-07 16:47:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>filter-chain-ruby-gem-for-data-manipulation</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="concurrency"><![CDATA[concurrency]]></category>
  <category domain="post_tag" nicename="data"><![CDATA[data]]></category>
  <category domain="post_tag" nicename="jruby"><![CDATA[jruby]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12483556883]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3634454;s:57:"https://twitter.com/chadremesch/status/618461313413443584";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3822061</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_3634454</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[chadremesch]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Oskie RPC - Network agnostic RPC</title>
  <link>http://remesch.com/2015/07/09/oskie-rpc-network-agnostic-rpc/</link>
  <pubDate>Fri, 10 Jul 2015 02:14:52 +0000</pubDate>
  <dc:creator>chadrem</dc:creator>
  <guid isPermaLink="false">http://remesch.com/?p=192</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://github.com/chadrem/oskie_rpc">Oskie RPC</a> is a simple RPC library and protocol for Ruby.  Main features:

<strong>Network agnostic:</strong> You provide it with input and receive output using whatever transport mechanism you prefer.  Typically this will be a TCP/IP connection.

<strong>Simple protocol:</strong> Though it has been developed for Ruby, the network protocol is extremely simple and should work well with any language that supports JSON encoded strings.

<strong>Easily modifiable:</strong> It was designed from the ground up to be modified both in code and in terms of protocol.  Prefer Message Pack over JSON?  Want to add compression?  All of these and more are easy to accomplish.

<strong>Messages and Requests:</strong>  Both messages (fire-and-forget) and requests (receive return values) are supported.  This covers the most common forms of communication over a TCP/IP socket.

<strong>Bi-directional:</strong> Both ends of a network connection are on equal footing once a connection is established.  This gives you great flexibility in designing your application.

<strong>Thread safe:</strong> Ruby threading has improved greatly over the last few years and is especially useful with JRuby.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>192</wp:post_id>
  <wp:post_date>2015-07-09 22:14:52</wp:post_date>
  <wp:post_date_gmt>2015-07-10 02:14:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>oskie-rpc-network-agnostic-rpc</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12580493241]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3634454;s:57:"https://twitter.com/chadremesch/status/619328914708533249";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3822061</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_3634454</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[chadremesch]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>389</wp:comment_id>
    <wp:comment_author><![CDATA[chadrem]]></wp:comment_author>
    <wp:comment_author_email>chad@remesch.com</wp:comment_author_email>
    <wp:comment_author_url>http://remesch.com</wp:comment_author_url>
    <wp:comment_author_IP>24.130.46.36</wp:comment_author_IP>
    <wp:comment_date>2015-08-17 10:29:36</wp:comment_date>
    <wp:comment_date_gmt>2015-08-17 14:29:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Adrian,

I haven't released any gems that provide a network transport for Oskie RPC.  Right now I am using Oskie RPC in production between mobile clients and servers.  For these apps I'm using it with my Reactomatic (EventMachine replacement) and Tribe (actor model) gems on the server side.  As I mentioned, my goal is to keep Oskie RPC transport agnostic.  Currently it is very easy to wire it up to TCP sockets.  I haven't tried it, but I believe it shouldn't be too much work to wire it up to a custom UDP or HTTP based server.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>388</wp:comment_parent>
    <wp:comment_user_id>11558416</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1439821776</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1439821776.412004947662353515625;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"chadrem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>13816893945</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1439821776</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>391</wp:comment_id>
    <wp:comment_author><![CDATA[chadrem]]></wp:comment_author>
    <wp:comment_author_email>chad@remesch.com</wp:comment_author_email>
    <wp:comment_author_url>http://remesch.com</wp:comment_author_url>
    <wp:comment_author_IP>24.130.46.36</wp:comment_author_IP>
    <wp:comment_date>2015-08-17 12:53:19</wp:comment_date>
    <wp:comment_date_gmt>2015-08-17 16:53:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Using it with a queue server is an interesting idea.  It will work with any transport that can delivery binary strings in both directions.  If both of your endpoints can send a simple "hello world" to each other then you can replace those strings with OSkie RPC.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>390</wp:comment_parent>
    <wp:comment_user_id>11558416</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1439830399</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1439830399.4096839427947998046875;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"chadrem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>13820894876</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1439830399</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>390</wp:comment_id>
    <wp:comment_author><![CDATA[aemadrid (@aemadrid)]]></wp:comment_author>
    <wp:comment_author_email>aemadrid@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/aemadrid</wp:comment_author_url>
    <wp:comment_author_IP>63.157.3.226</wp:comment_author_IP>
    <wp:comment_date>2015-08-17 12:01:11</wp:comment_date>
    <wp:comment_date_gmt>2015-08-17 16:01:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sounds like an interesting project. I'm more interested in getting the requests from a queue (NSQ, RMQ, etc.) rather than direct request though. I'll take a look and see how hard it would be to make it work that way.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>389</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1439827271.7942640781402587890625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>twitter</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>http://pbs.twimg.com/profile_images/463699935351693312/_3f8bCeI_normal.png</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>7436122</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>13820109529</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1439828660</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1439828660</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1439828660.4017970561981201171875;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"chadrem";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>388</wp:comment_id>
    <wp:comment_author><![CDATA[Adrian Madrid]]></wp:comment_author>
    <wp:comment_author_email>aemadrid@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/10154111286632166/</wp:comment_author_url>
    <wp:comment_author_IP>71.199.48.250</wp:comment_author_IP>
    <wp:comment_date>2015-08-14 22:15:59</wp:comment_date>
    <wp:comment_date_gmt>2015-08-15 02:15:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sounds interesting. Do you have any network transport prepared?  RabbitMQ/NSQ/etc?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>13816466243</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1439820860</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1439820860</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1439820860.976315021514892578125;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"chadrem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1439604959.520617961883544921875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>facebook</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value/>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>10154111286632166</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1439604959</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1439610326.841929912567138671875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
  </channel>
</rss>
